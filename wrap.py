#!/usr/bin/env python3
# This file was generated by WRAP
from os import getenv, environ, listdir, system
from os.path import splitext, isdir
from pathlib import Path
from sys import argv

from base_processors.generic_argparse_processor import call


class wrap:

    @staticmethod
    def install(wrap_folder:str = "~/.wrap", install_to_zshrc:bool = True, install_to_bashrc:bool = False, install_to_fishrc:bool = False):
        """
        Installs a default configuration for wrap using the base processors
        and some sensible defaults (wrap can be used without this)
        """
        # create wrap folder
        wrap_folder_path = Path(wrap_folder).expanduser().resolve()
        wrap_folder_path.mkdir(parents=True, exist_ok=True)
        # create wrap init file


    @staticmethod
    def gen(
            input_path: str,
            output_path: str,
            processor_path: str,
            clean_output_path: bool = True,
            debug_mode: bool = False,
    ):

        flat_file_list = [Path(f"{path}/{file}") for path in input_path.split(":") for file in listdir(path)]
        flat_loader_list = [Path(f"{path}/{file}") for path in processor_path.split(":") for file in listdir(path)]
        print(flat_file_list) if debug_mode else None
        print(flat_loader_list) if debug_mode else None
        # map the loaders to the files based on the file name
        loader_map = {
            file: loader for file in flat_file_list
            for loader in flat_loader_list if
            loader.name != "__pycache__" and file.name.endswith(splitext(loader.name)[1])
        }
        print(loader_map) if debug_mode else None
        # clean output path
        if clean_output_path:
            print("Cleaning old files") if debug_mode else None
            system(f"rm {output_path}/* || true")

        # run the loaders on the files
        for file, loader in loader_map.items():
            print(f"Running {loader} on {file}") if debug_mode else None
            system(f"chmod +x {loader} || true")
            system(f"{loader} {file} {output_path} {'--debug_mode' if debug_mode else ''}")

call(wrap)
